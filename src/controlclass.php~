<?php

/**
*
* EBAY  - ROCK PAPER SCISSORS GAME
* 20/11/2011
* ------
* 
* CONTROLLER CLASS
*
*/


/**
* class EbayRPSGameControlClass
* @desc: This class only has one function,
*  run, that should always return a value, array
* to be used in the view
*/


class EbayRPSGameControlClass {

	private	$pageVars; // the attribute/array of processed variables to be returned to the bootstrap
	private	$route; // the attribute mirroring the input parameter of route, defining how the
			   //control should process

	public function __construct() {
		$this->pagevars = array();
	}

	/**
	* function run
	* @description: This public function is called by the
	* router. This and the constructor are the only exposed functions.
	* this returns an array for the view to process/display
	*/
	public function run($route) {
		$this->route = $route;
		$this->pageVars["route"] = $this->route;
		$this->chooseControls();
		return $this->pageVars;
	}

	/**
	* private function chooseControls
	* @description: This function processes the route and calls controlling methods
	*  and returns an array of proce
	*/
	private function chooseControls() {
		if ($this->route["control"]=="game") {
			$this->doGameStage();
		} else if ($this->route["control"]=="page") {
			$this->getPage();
		}
	}

	/**
	* private function getPage
	* @description: This function returns the content of a page for. the file inclusion
	* is not ideal but there is no db for this one. Doesnt return anything, modifies the
	* pageVars attribute of the control 
	*/
	private function getPage() {
		if ($this->route["action"]=="cv") {
			$this->pageVars["content"] = file_get_contents("pages/cv.php");
			$this->pageVars["title"] = 'Here you\'ll find my CV...';
			$this->pageVars["heading"] = 'Here you\'ll find my CV...';
		} else if ($this->route["action"]=="hi") {
			$this->pageVars["content"] = file_get_contents("pages/hi.php")."this";
			$this->pageVars["title"] = 'Hi Guys @ Ebay, a word from me...';
			$this->pageVars["heading"] = 'Hi Guys @ Ebay, a word from me...';
		}
	}

	/**
	* private function 
	* @description: This function processes the action in the game stage and calls controlling methods
	*  and modifies the attribute of processed vars for view
	*/
	private function doGameStage() {
		if ($this->route["action"]=="start") {
			require_once('sessionclass.php');
			$session = new EbayRPSGameSessionClass();	
			$session->reset();
			$this->pageVars["stage"] = "start";
		} else if ($this->route["action"]=="choosePlayers") {
			if ($_REQUEST["run"]=="run") {
				$this->savePlayerChoices();
				// change the action and reroute to play stage
				$this->route["action"]="play";
				$pageVars = $this->run($this->route);
				$view = new EbayRPSGameViewClass();
				$view->run($pageVars);
				exit();
			} else {
				$this->pageVars["stage"] = "choosePlayers";
			}
		} else if ($this->route["action"]=="play") {
			$this->processPlayerChoices();
			$this->pageVars["stage"] = "play";
		} else if ($this->route["action"]=="thanks") {
			$this->pageVars["stage"] = "thanks";
		}		
	}

	/**
	* private function 
	* @description: This function processes the player choices in the player choice stage,
	*  and saves them in a session
	*/
	private function savePlayerChoices() {
		require_once('sessionclass.php');
		$session = new EbayRPSGameSessionClass();	
		$session->setVar("player1type", $_REQUEST["player1type"])	;
		if ($_REQUEST["player1type"]=="human") {
			$session->setVar("player1choice", $_REQUEST["player1choice"])	;
		}	
		$session->setVar("player2type", $_REQUEST["player2type"])	;
		if ($_REQUEST["player2type"]=="human") {
			$session->setVar("player2choice", $_REQUEST["player2choice"])	;
		}
	}

	/**
	* private function 
	* @description: This function processes the player choices in the player choice stage,
	*  and saves them in a session
	*/
	private function processPlayerChoices() {
		require_once('sessionclass.php');
		$session = new EbayRPSGameSessionClass();	
		$this->pageVars["player1"]["type"]=$session->getVar("player1type");
		$this->pageVars["player2"]["type"]=$session->getVar("player2type");
		// assign the choice for player one, human or computer
		if ($this->pageVars["player1"]["type"]=="human") {
			$this->pageVars["player1"]["choice"] = $session->getVar("player1choice") ;
		} else {
			$this->pageVars["player1"]["choice"] = $this->getRandomPlayerChoice() ;
		}
		// assign the choice for player two, human or computer
		if ($this->pageVars["player2"]["type"]=="human") {
			$this->pageVars["player2"]["choice"] = $session->getVar("player2choice") ;
		} else {
			$this->pageVars["player2"]["choice"] = $this->getRandomPlayerChoice() ;
		}
		// calculate winner
		$winstatus = $this->calculateWinner($this->pageVars["player1"]["choice"], $this->pageVars["player2"]["choice"]);
		// assign results to view vars
		$this->pageVars["player1"]["result"]=$winstatus[0];
		$this->pageVars["player2"]["result"]=$winstatus[1];
	}

	/**
	* private function 
	* @description: This function returns a random choice on the computer's behalf,
	*/
	private function getRandomPlayerChoice() {
		$choices = array("rock", "paper", "scissors");
		$key = array_rand($choices) ;
		return $choices[$key];
	}

	/**
	* private function 
	* @description: This function processes the winner,
	*  and returns an array of win states in the form of
	*  win, draw or lose for each player
	*/
	private function calculateWinner($player1, $player2) {
		switch($player1) {
			case "scissors":
				switch($player2) {
					case "scissors":
						$player1status = "draw";
						$player2status = "draw";
					break;
					case "rock":
						$player1status = "lose";
						$player2status = "win";
					break;
					case "paper":
						$player1status = "win";
						$player2status = "lose";
					break;
					default:
						$player1status = "draw";
						$player2status = "draw";
					break;
				}
			break;		
			case "rock":
				switch($player2) {
					case "scissors":
						$player1status = "win";
						$player2status = "lose";
					break;
					case "rock":
						$player1status = "draw";
						$player2status = "draw";
					break;
					case "paper":
						$player1status = "win";
						$player2status = "lose";
					break;
					default:
						$player1status = "draw";
						$player2status = "draw";
					break;
				}
			break;		
			case "paper":
				switch($player2) {
					case "scissors":
						$player1status = "lose";
						$player2status = "win";
					break;
					case "rock":
						$player1status = "win";
						$player2status = "lose";
					break;
					case "paper":
						$player1status = "draw";
						$player2status = "draw";
					break;
					default:
						$player1status = "draw";
						$player2status = "draw";
					break;
				}
			break;		
			default :
			break;			
		}
		return array($player1status, $player2status);
	}

}


